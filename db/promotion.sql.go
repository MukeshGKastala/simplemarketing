// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: promotion.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPromotion = `-- name: CreatePromotion :execresult
INSERT INTO promotions (
    promotion_code,
    start_date,
    end_date
) VALUES (
    ?, ?, ?
)
`

type CreatePromotionParams struct {
	PromotionCode string
	StartDate     time.Time
	EndDate       time.Time
}

func (q *Queries) CreatePromotion(ctx context.Context, arg CreatePromotionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPromotion, arg.PromotionCode, arg.StartDate, arg.EndDate)
}

const getPromotion = `-- name: GetPromotion :one
SELECT id, promotion_code, start_date, end_date, created_at, updated_at, deleted_at FROM promotions
WHERE id = ? LIMIT 1
`

func (q *Queries) GetPromotion(ctx context.Context, id int32) (Promotion, error) {
	row := q.db.QueryRowContext(ctx, getPromotion, id)
	var i Promotion
	err := row.Scan(
		&i.ID,
		&i.PromotionCode,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const isPromotionCodeTaken = `-- name: IsPromotionCodeTaken :one
SELECT COUNT(1) > 0 AS is_exists
FROM promotions
WHERE
    promotion_code = ?
    AND deleted_at IS NULL
    AND ? < end_date
    AND ? > start_date
`

type IsPromotionCodeTakenParams struct {
	PromotionCode string
	StartDate     time.Time
	EndDate       time.Time
}

func (q *Queries) IsPromotionCodeTaken(ctx context.Context, arg IsPromotionCodeTakenParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isPromotionCodeTaken, arg.PromotionCode, arg.StartDate, arg.EndDate)
	var is_exists bool
	err := row.Scan(&is_exists)
	return is_exists, err
}

const listPromotions = `-- name: ListPromotions :many
SELECT id, promotion_code, start_date, end_date, created_at, updated_at, deleted_at FROM promotions
WHERE deleted_at IS NULL
`

func (q *Queries) ListPromotions(ctx context.Context) ([]Promotion, error) {
	rows, err := q.db.QueryContext(ctx, listPromotions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Promotion
	for rows.Next() {
		var i Promotion
		if err := rows.Scan(
			&i.ID,
			&i.PromotionCode,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
